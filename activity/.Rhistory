## Loading and preprocessing the data
setwd("/Users/jesus/Documents/GitHub/RepData_PeerAssessment1")
RawData<- read.csv(activity.csv)
RawData<- read.csv("activity.csv")
## Loading and preprocessing the data
setwd("/Users/jesus/Documents/GitHub/RepData_PeerAssessment1/activity")
RawData<- read.csv("activity.csv")
head(RawData)
?read.csv
View(RawData)
View(RawData)
```r
setwd("/Users/jesus/Documents/GitHub/RepData_PeerAssessment1/activity")
RawData<- read.csv("activity.csv",na.strings="NA")
```r
setwd("/Users/jesus/Documents/GitHub/RepData_PeerAssessment1/activity")
RawData<- read.csv("activity.csv",na.strings=("NA"))
str(RawData)
as.date(date)
```r
library(ggplot2)
library(tidyverse)
```
library(ggplot2)
library(tidyverse)
library(ggplot2)
library(tidyverse)
RawData$steps=FALSE
RawData<- read.csv("activity.csv",na.strings=("NA"))
setwd("/Users/jesus/Documents/GitHub/RepData_PeerAssessment1/activity")
RawData<- read.csv("activity.csv",na.strings=("NA"))
setwd("/Users/jesus/Documents/GitHub/RepData_PeerAssessment1/activity")
RawData<- read.csv("activity.csv",na.strings=("NA"))
is.na(RawData$steps)
is.na(RawData$steps)==FALSE
filter(RawData, is.na(RawData$steps==FALSE))
filter(RawData, is.na(RawData$steps)==FALSE)
group_by(NaRemoveddate)
group_by(NaRemoved$date)
NaRemoved<-filter(RawData, is.na(RawData$steps)=FALSE)
NaRemoved<-filter(RawData, (is.na(RawData$steps)=FALSE))
is.na(RawData$steps)=FALSE
is.na(RawData$steps)
is.na(RawData$steps)==FALSE
NaRemoved<-filter(RawData, (is.na(RawData$steps)==FALSE))
group_by(NaRemoved$date)
?summaryBy
??summaryBy
install.packages("doBy")
library(doBy)
summaryBy(steps~date,data=NAremoved)
summaryBy(steps~date,data=NARemoved)
summaryBy(steps~date,data=NaRemoved)
summaryBy(steps~date,data=NaRemoved, FUN = mean())
summaryBy(steps~date,data=NaRemoved, FUN = mean
)
summaryBy(steps~date,data=NaRemoved, FUN = c(mean,median))
summaryBy(steps~date,data=NaRemoved, FUN = c(mean,med))
median(NaRemoved$steps)
summaryBy(steps~date,data=NaRemoved, FUN = sum)
ggplot(StepsPerDay, aes(x=date,y=steps))+geom_histogram()
StepsPerDay<-summaryBy(steps~date,data=NaRemoved, FUN = sum)
ggplot(StepsPerDay, aes(x=date,y=steps))+geom_histogram()
ggplot(StepsPerDay, aes(x=date,y=steps.sum))+geom_histogram()
last_error()
`rlang::last_error()
``
ggplot(StepsPerDay, aes(y=steps.sum))+geom_histogram()
str(StepsPerDay)
as.Date(StepsPerDay$date)
str(as.Date(StepsPerDay$date))
hist(StepsPerDay$steps.sum)
hist(StepsPerDay$steps.sum)
NaRemoved<-filter(RawData, (is.na(RawData$steps)==FALSE))
StepsPerDay<-summaryBy(steps~date,data=NaRemoved, FUN = sum)
hist(StepsPerDay$steps.sum)
View(RawData)
View(StepsPerDay)
summary(steps.sum, data=StepsPerDay, Fun=mean)
summary(StepsPerDay$steps.sum, FUN=mean)
summary(mean(StepsPerDay$steps.sum))
mean(StepsPerDay$steps.sum)
median(StepsPerDay$steps.sum)
ggplot(RawData, aes(x=interval, y=steps) )+geom_line()
View(RawData)
ggplot(NaRemoved, aes(x=interval, y=steps) )+geom_line()
ggplot(NaRemoved, aes(x=interval, y=steps) )+geom_line()+geom(point)
ggplot(NaRemoved, aes(x=interval, y=steps) )+geom_line()+geom_point()
ggplot(NaRemoved, aes(x=interval, y=steps) )+geom_line()+geom_point()
StepsPerInterval<-summaryBy(steps~interval,data=NaRemoved, FUN = mean)
View(StepsPerInterval)
View(StepsPerInterval)
View(RawData)
Sys.Date()
??POSIXlt
as.POSIXct(RawData$interval)
as.POSIXt(RawData$interval)
View(StepsPerInterval)
StepsPerInterval$interval<-as.factor(StepsPerInterval$interval)
ggplot(NaRemoved, aes(x=interval, y=steps) )+geom_line()+geom_point()
ggplot(NaRemoved, aes(x=interval, y=steps) )+geom_line()+geom_point()
ggplot(NaRemoved, aes(x=interval, y=steps) )+geom_line()+geom_point()
View(StepsPerInterval)
ggplot(StepsPerInterval, aes(x=interval, y=steps.mean) )+geom_line()+geom_point()
ggplot(StepsPerInterval, aes(x=interval, y=steps.mean) )+geom_line()+geom_point()
ggplot(StepsPerInterval, aes(x=interval, y=steps.mean) )+geom_line()
ggplot(StepsPerInterval, aes(x=interval, y=steps.mean) )+geom_vline()
ggplot(StepsPerInterval, aes(x=interval, y=steps.mean) )+geom_line()
StepsPerInterval<-summaryBy(steps~interval,data=NaRemoved, FUN = mean)
ggplot(StepsPerInterval, aes(x=interval, y=steps.mean) )+geom_line()
str(StepsPerInterval)
StepsPerInterval$interval<-as.factor(StepsPerInterval$interval)
ggplot(StepsPerInterval, aes(x=interval, y=steps.mean) )+geom_line()
ggplot(StepsPerInterval, aes(y=steps.mean) )+geom_line()
?mutate
mutate(interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = hr + (min / 60))
mutate(data=StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = hr + (min / 60))
mutate(data=StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(data=StepsPerInterval,interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(data=StepsPerInterval,interval = hr + (min / 60))
mutate(.data=StepsPerinterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = hr + (min / 60))
mutate(interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = hr + (min / 60))
mutate(StepsPerInterval$interval = str_pad(interval,
mutate(StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = hr + (min / 60))
test<-mutate(StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = hr + (min / 60))
View(test)
StepsPerInterval<-summaryBy(steps~interval,data=NaRemoved, FUN = mean)
test<-mutate(StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = min + (hr / 60))
View(test)
test<-mutate(StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = hr + (min / 60))
test<-mutate(StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = (hr*60) + (min))
ggplot(StepsPerInterval, aes(x=interval, y=steps.mean) )+geom_line()
Max(StepsPerInterval$steps.mean~StepsPerInterval$interval)
??maximum
max((StepsPerInterval$steps.mean~StepsPerInterval$interval))
max((StepsPerInterval$interval))
max((StepsPerInterval$steps.mean))
summaryBy(steps.mean~interval,data=StepsPerInterval,FUN = max)
summary(steps.mean~interval,data=StepsPerInterval,FUN = max)
summary(steps.mean,data=StepsPerInterval,FUN = max)
summary(data=StepsPerInterval,FUN = max)
summary(StepsPerDay
summary(StepsPerInterval)
?which.max
which.max(StepsPerInterval$steps.mean)
interval[which.max(StepsPerInterval$steps.mean)]
StepsPerInterval$interval[which.max(StepsPerInterval$steps.mean)]
StepsPerInterval<-summaryBy(steps~interval,data=NaRemoved, FUN = mean)
# Converts from format hhmm to minutes
test<-mutate(StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = (hr*60) + (min))
#graph
ggplot(StepsPerInterval, aes(x=interval, y=steps.mean) )+geom_line()
#Max
StepsPerInterval$interval[which.max(StepsPerInterval$steps.mean)]
```r
#Calculation of missing values
count(is.na(RawData))
```
is.na(RawData)
```r
#Calculation of missing values
count(is.na(RawData)==TRU)
```
is.na(RawData)==TRUE
is.na(RawData)==TRUE
is.na(RawData)=TRUE
is.na(RawData)
RawData<- read.csv("activity.csv",na.strings=("NA"))
setwd("/Users/jesus/Documents/GitHub/RepData_PeerAssessment1/activity")
RawData<- read.csv("activity.csv",na.strings=("NA"))
setwd("/Users/jesus/Documents/GitHub/RepData_PeerAssessment1/activity")
RawData<- read.csv("activity.csv",na.strings=("NA"))
is.na(RawData$steps)
nrow(is.na(RawData$steps)==TRUE)
nrow(is.na(RawData$steps)=TRUE)
nrow(is.na(RawData$steps))
is.na(RawData$steps
)
RawData[is.na(RawData$steps)]
RawData[is.na(RawData$steps)==TRUE]
RawData[which(is.na(RawData$steps)==TRUE)]
RawData[which(is.na(RawData$steps)=TRUE)]
which(is.na(RawData$steps)==TRUE)
which(
is.na(StepsPerInterval)
is.na(StepsPerInterval)==TRUE
StepsPerInterval$interval[is.na(StepsPerInterval)==TRUE]
StepsPerInterval$interval
RawData[is.na(RawData$steps)]
RawData[is.na(RawData$steps),]
RawData[is.na(RawData$steps)==TRUE,]
RawData[is.na(RawData$steps)==TRUE]
is.na(RawData$steps)
is.na(RawData$steps)==TRUE
which(is.na(RawData$steps)==TRUE)
is.na(RawData$steps)==TRUE
RawData[is.na(RawData$steps)==TRUE]
RawData[is.na(RawData$steps)==TRUE,]
nrow(RawData[is.na(RawData$steps)==TRUE,])
#Calculation of missing values
print(nrow(RawData[is.na(RawData$steps)==TRUE,]))
View(RawData)
#replacement of values
RawStepsPerDay<-summaryBy(steps~date,data=RawData, FUN = sum)
View(RawStepsPerDay)
MedSteps<-median(StepsPerDay$steps.sum)
NaRemoved<-filter(RawData, (is.na(RawData$steps)==FALSE))
StepsPerDay<-summaryBy(steps~date,data=NaRemoved, FUN = sum)
hist(StepsPerDay$steps.sum)
MeanSteps<-mean(StepsPerDay$steps.sum)
MedSteps<-median(StepsPerDay$steps.sum)
NaRemoved<-filter(RawData, (is.na(RawData$steps)==FALSE))
StepsPerDay<-summaryBy(steps~date,data=NaRemoved, FUN = sum)
hist(StepsPerDay$steps.sum)
MeanSteps<-mean(StepsPerDay$steps.sum)
MedSteps<-median(StepsPerDay$steps.sum)
print(MeanSteps)
print(MedSteps)
NaRemoved<-filter(RawData, (is.na(RawData$steps)==FALSE))
StepsPerDay<-summaryBy(steps~date,data=NaRemoved, FUN = sum)
hist(StepsPerDay$steps.sum)
MeanSteps<-mean(StepsPerDay$steps.sum)
MedSteps<-median(StepsPerDay$steps.sum)
print(c("Mean steps taken is",MeanSteps))
print(MedSteps)
NaRemoved<-filter(RawData, (is.na(RawData$steps)==FALSE))
StepsPerDay<-summaryBy(steps~date,data=NaRemoved, FUN = sum)
hist(StepsPerDay$steps.sum)
MeanSteps<-mean(StepsPerDay$steps.sum)
MedSteps<-median(StepsPerDay$steps.sum)
print(c("Mean steps taken is",MeanSteps))
print(c("Median steps taken is",MedSteps))
#replacement of values
RawStepsPerInterval <- summaryBy(steps~interval,data=NaRemoved, FUN = mean)
View(RawStepsPerInterval)
merge(RawData,RawStepsPerInterval, by.x = interval, by.y = interval.mean)
merge(RawData,RawStepsPerInterval, by.x = RawData$interval, by.y = RawStepsPerInterval$interval.mean)
??merge
?merge
merge(RawData,RawStepsPerInterval, by.x = RawData$interval, by.y = RawStepsPerInterval$interval.mean,all.x=TRUE)
merge(RawData,RawStepsPerInterval, by.x = "Interval", by.y = "interval.mean")
merge(RawData,RawStepsPerInterval, by.x = "Interval", by.y = "interval.mean", all.x=TRUE)
merge(RawData,RawStepsPerInterval, by.x = "Interval", by.y = "interval", all.x=TRUE)
merge(RawData,RawStepsPerInterval, by.x = "interval", by.y = "interval", all.x=TRUE)
StepsPerInterval<-summaryBy(steps~interval,data=NaRemoved, FUN = mean)
# Converts from format hhmm to minutes
convert<-mutate(StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = (hr*60) + (min))
#graph
ggplot(StepsPerInterval, aes(x=interval, y=steps.mean) )+geom_line()
#Max
StepsPerInterval$interval[which.max(StepsPerInterval$steps.mean)]
View(test)
View(StepsPerInterval)
StepsPerInterval<-summaryBy(steps~interval,data=NaRemoved, FUN = mean)
# Converts from format hhmm to minutes
ConvertedSteps<-mutate(StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = (hr*60) + (min))
#graph
ggplot(ConvertedSteps, aes(x=interval, y=steps.mean) )+geom_line()
#Max
ConvertedSteps$interval[which.max(ConvertedSteps$steps.mean)]
StepsPerInterval<-summaryBy(steps~interval,data=NaRemoved, FUN = mean)
# Converts from format hhmm to minutes
ConvertedSteps<-mutate(StepsPerInterval,interval = str_pad(interval,
width = 4,
side = "left",
pad = "0")) %>%
extract(interval,
into = c("hr", "min"),
regex = "(\\d{2})(\\d{2})",
convert = TRUE) %>%
mutate(interval = (hr*60) + (min))
#graph
ggplot(ConvertedSteps, aes(x=interval, y=steps.mean) )+geom_line()
#Max
StepsPerInterval$interval[which.max(StepsPerInterval$steps.mean)]
?coalesce
MergedResults<-merge(RawData,RawStepsPerInterval, by.x = "interval", by.y = "interval", all.x=TRUE)
coalesce(MergedResults$steps,MergedResults$steps.mean)
test<-coalesce(MergedResults$steps,MergedResults$steps.mean)
MergedResults$test<-coalesce(MergedResults$steps,MergedResults$steps.mean)
View(MergedResults)
View(RawData)
#Calculation of missing values
print(nrow(RawData[is.na(RawData$steps)==TRUE,]))
#replacement of values
RawStepsPerInterval <- summaryBy(steps~interval,data=NaRemoved, FUN = mean)
MergedResults<-merge(RawData,RawStepsPerInterval, by.x = "interval", by.y = "interval", all.x=TRUE)
MergedResults$ImputedSteps<-coalesce(MergedResults$steps,MergedResults$steps.mean)
ImputedData<-summaryBy(steps~date,data=MergedResults, FUN = sum)
View(ImputedData)
#Calculation of missing values
print(nrow(RawData[is.na(RawData$steps)==TRUE,]))
#replacement of values
RawStepsPerInterval <- summaryBy(steps~interval,data=NaRemoved, FUN = mean)
MergedResults<-merge(RawData,RawStepsPerInterval, by.x = "interval", by.y = "interval", all.x=TRUE)
MergedResults$ImputedSteps<-coalesce(MergedResults$steps,MergedResults$steps.mean)
ImputedData<-summaryBy(steps~date,data=MergedResults, FUN = sum)
#replacement of values
RawStepsPerInterval <- summaryBy(steps~interval,data=NaRemoved, FUN = mean)
MergedResults<-merge(RawData,RawStepsPerInterval, by.x = "interval", by.y = "interval", all.x=TRUE)
MergedResults$ImputedSteps<-coalesce(MergedResults$steps,MergedResults$steps.mean)
View(MergedResults)
ImputedData<-summaryBy(ImputedSteps~date,data=MergedResults, FUN = sum)
View(ImputedData)
